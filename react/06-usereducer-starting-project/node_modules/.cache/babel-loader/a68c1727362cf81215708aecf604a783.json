{"ast":null,"code":"var _jsxFileName = \"/Users/v-angel.zahariev/Documents/projects/goals-projects/react/06-usereducer-starting-project/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport { act } from 'react-dom/cjs/react-dom-test-utils.production.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (prevState, actionFunction) => {\n  if (actionFunction.type === 'USER_INPUT') {\n    //here we check type from finction argument which we passed to dispatchEmail function\n    return {\n      value: actionFunction.value,\n      isValid: actionFunction.value.includes('@')\n    };\n  }\n\n  if (actionFunction.type === 'INPUT_BLUR') {\n    return {\n      value: prevState.value,\n      isValid: prevState.value.includes('@')\n    }; //here we are using prevState to access last that is written from user\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}; //here when we use useReducer function we can declare function which will be parameter outside component\n\n\nconst passwordReducer = (prevState, actionFunction) => {\n  if (actionFunction.type === 'USER_INPUT') {\n    //here we check type from finction argument which we passed to dispatchPassword function\n    return {\n      value: actionFunction.value,\n      isValid: actionFunction.value.trim().length > 6\n    };\n  }\n\n  if (actionFunction.type === 'INPUT_BLUR') {\n    return {\n      value: prevState.value,\n      isValid: prevState.value.trim().length > 6\n    }; //here we are using prevState to access last that is written from user\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}; //here when we use useReducer function we can declare function which will be parameter outside component\n\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  //const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: false\n  }); // we use useReducer when we need to manage state which depends \n  //to other states or to manage complex state\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: false\n  });\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n    return () => {\n      console.log('EFFECT CLEANUP');\n    };\n  }, []);\n  const {\n    isValid: isValidEmail\n  } = emailState; //here with destructoring and adding aliases we extract isValit check to two variables\n\n  const {\n    isValid: isValidPassword\n  } = passwordState; //and we will use them below\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid( //enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      emailState.isValid && passwordState.isValid //here we add check from reducer\n      );\n    }, 500);\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [isValidEmail, isValidPassword]); //[emailState, passwordState]);//here we add states as dependencies because of following changes \n  //this useEffect will be executed every time when there is a change in emailState or passwordState\n  //but this will cause many calls and to avoid that we will use state of inputs not a values\n\n  const emailChangeHandler = event => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); //here we use dispatchEmail function to set emailstate\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid//here we use passwordState from reducer\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    //setEnteredPassword(event.target.value);\n    dispatchPassword({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6//here we use emailState.isValid from reducer\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    //setEmailIsValid(emailState.isValid);//here we take isValid from reducer\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    }); //here we  add only type bacause we need to know only that input have lost  a focus\n  };\n\n  const validatePasswordHandler = () => {\n    //setPasswordIsValid(passwordState.isValid);\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value); //here we take emailState from reducer\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${//passwordIsValid === false ? classes.invalid : ''\n        passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"eXG6FnKlGeSo8gWH9GrFYCqkwXk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/v-angel.zahariev/Documents/projects/goals-projects/react/06-usereducer-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","act","emailReducer","prevState","actionFunction","type","value","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","console","log","isValidEmail","isValidPassword","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport { act } from 'react-dom/cjs/react-dom-test-utils.production.min';\n\nconst emailReducer = (prevState, actionFunction)=>{\n  if(actionFunction.type === 'USER_INPUT'){//here we check type from finction argument which we passed to dispatchEmail function\n    return {value : actionFunction.value, isValid : actionFunction.value.includes('@')}\n  }\n  if(actionFunction.type === 'INPUT_BLUR'){\n    return {value : prevState.value, isValid : prevState.value.includes('@')}//here we are using prevState to access last that is written from user\n  }\n  return {value:'',isValid:false}\n};//here when we use useReducer function we can declare function which will be parameter outside component\n\nconst passwordReducer = (prevState, actionFunction)=>{\n  if(actionFunction.type === 'USER_INPUT'){//here we check type from finction argument which we passed to dispatchPassword function\n    return {value : actionFunction.value, isValid : actionFunction.value.trim().length > 6}\n  }\n  if(actionFunction.type === 'INPUT_BLUR'){\n    return {value : prevState.value, isValid : prevState.value.trim().length > 6}//here we are using prevState to access last that is written from user\n  }\n  return {value:'',isValid:false}\n};//here when we use useReducer function we can declare function which will be parameter outside component\n\nconst Login = (props) => {\n // const [enteredEmail, setEnteredEmail] = useState('');\n // const [emailIsValid, setEmailIsValid] = useState();\n //const [enteredPassword, setEnteredPassword] = useState('');\n // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const[emailState, dispatchEmail] = useReducer(emailReducer,\n    {value:'',isValid:false});// we use useReducer when we need to manage state which depends \n  //to other states or to manage complex state\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {value:'',isValid:false});\n\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n\n    return () => {\n      console.log('EFFECT CLEANUP');\n    };\n  }, []);\n\n  const {isValid : isValidEmail} = emailState;//here with destructoring and adding aliases we extract isValit check to two variables\n  const {isValid : isValidPassword} = passwordState//and we will use them below\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(\n        //enteredEmail.includes('@') && enteredPassword.trim().length > 6\n        emailState.isValid && passwordState.isValid//here we add check from reducer\n      );\n    }, 500);\n\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [isValidEmail,isValidPassword])//[emailState, passwordState]);//here we add states as dependencies because of following changes \n  //this useEffect will be executed every time when there is a change in emailState or passwordState\n  //but this will cause many calls and to avoid that we will use state of inputs not a values\n\n  const emailChangeHandler = (event) => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({type:'USER_INPUT', value: event.target.value});//here we use dispatchEmail function to set emailstate\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid//here we use passwordState from reducer\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    //setEnteredPassword(event.target.value);\n    dispatchPassword({type:'USER_INPUT',value:event.target.value});\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6//here we use emailState.isValid from reducer\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    //setEmailIsValid(emailState.isValid);//here we take isValid from reducer\n    dispatchEmail({type:'INPUT_BLUR'});//here we  add only type bacause we need to know only that input have lost  a focus\n  };\n\n  const validatePasswordHandler = () => {\n    //setPasswordIsValid(passwordState.isValid);\n    dispatchPassword({type:'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);//here we take emailState from reducer\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          {/*below we make two way binding with value={emailState.value} */}\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value} \n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            //passwordIsValid === false ? classes.invalid : ''\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}