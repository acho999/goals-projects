{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\angel.zahariev\\\\Documents\\\\projects\\\\myreactapp\\\\src\\\\components\\\\ComponentLifeCycle.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ComponentLifeCycle extends Component {\n  // има 3 цикъла mounting(когато компонента се създава), updating(когато се ъпдейтва компонента)\n  // , unmounting (когато компонента се дестройва)\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n    this.increment = this.increment.bind(this);\n  }\n\n  componentDidMount() {\n    //тук слагаме неща които искаме да се извършат когато компонента се създава извиква се след конструктора\n    this.interval = setInterval(this.increment, 1000);\n  }\n\n  componentDidupdate(prevProps, prevState) {//това се изпълнява когато компонента се промени има prevProps и prevState\n  }\n\n  componentWillUnmount() {\n    // това се вика точно преди компонента да се инищожи тук затриваме някакви евенти\n    clearInterval(this.interval);\n  }\n\n  increment() {\n    this.setState(prevState => {\n      return {\n        counter: ++prevState.counter\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ComponentLifeCycle;","map":{"version":3,"sources":["C:/Users/angel.zahariev/Documents/projects/myreactapp/src/components/ComponentLifeCycle.js"],"names":["React","Component","ComponentLifeCycle","constructor","props","state","counter","increment","bind","componentDidMount","interval","setInterval","componentDidupdate","prevProps","prevState","componentWillUnmount","clearInterval","setState","render","color"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,kBAAN,SAAiCD,SAAjC,CAA2C;AAEvC;AACI;AAEJE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAEd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAb;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf;AACD,SAAKC,QAAL,GAAgBC,WAAW,CAAC,KAAKJ,SAAN,EAAgB,IAAhB,CAA3B;AACF;;AAEDK,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB,CACrC;AAGH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB;AAEAC,IAAAA,aAAa,CAAC,KAAKN,QAAN,CAAb;AAGH;;AAEDH,EAAAA,SAAS,GAAE;AAEP,SAAKU,QAAL,CAAeH,SAAD,IAAc;AACxB,aAAO;AAACR,QAAAA,OAAO,EAAE,EAAGQ,SAAS,CAACR;AAAvB,OAAP;AACH,KAFD;AAIH;;AAEDY,EAAAA,MAAM,GAAE;AACJ,wBAEI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAZ;AAAA,6BAEI;AAAA,kBAAK,KAAKd,KAAL,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AASH;;AAlDsC;;AAsD3C,eAAeJ,kBAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ComponentLifeCycle extends Component {\r\n\r\n    // има 3 цикъла mounting(когато компонента се създава), updating(когато се ъпдейтва компонента)\r\n        // , unmounting (когато компонента се дестройва)\r\n    interval;\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        this.state = {counter:0};\r\n        this.increment = this.increment.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        //тук слагаме неща които искаме да се извършат когато компонента се създава извиква се след конструктора\r\n       this.interval = setInterval(this.increment,1000)\r\n    }\r\n\r\n    componentDidupdate(prevProps, prevState) {\r\n        //това се изпълнява когато компонента се промени има prevProps и prevState\r\n\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // това се вика точно преди компонента да се инищожи тук затриваме някакви евенти\r\n\r\n        clearInterval(this.interval);\r\n\r\n\r\n    }\r\n\r\n    increment(){\r\n\r\n        this.setState((prevState) =>{\r\n            return {counter: ++ prevState.counter}\r\n        });\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n\r\n            <div style={{color:'green'}}>\r\n\r\n                <h1>{this.state.counter}</h1>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ComponentLifeCycle"]},"metadata":{},"sourceType":"module"}