{"ast":null,"code":"var _jsxFileName = \"/Users/v-angel.zahariev/Documents/projects/goals-projects/react/reactHooks/src/components/Hooks.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport './hooks.css';\nimport Card from './UI components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Hooks(props) {\n  _s();\n\n  // components from function type can have state can have props but to add state we have to use hooks\n  //they can be used only for presentation with returning some html, but they can have state and can receive props\n  //here we have not extend React.Component\n  //here we have not this keyword we will be able to access component state without 'this'\n  //here we have not lifecycle methods\n  //it can be by two ways setTitle(()=>++title) or setTitle(++tistle)\n  //when state is set in title if component rerenders it will save its value\n  let [title, setTitle] = useState(props.title); //here we set initial value trough props.title\n\n  const handler = () => {\n    console.log('pesho');\n  }; //two ways for hadler arrow anonymous function\n\n\n  function handlerFunction() {\n    console.log('gosho');\n  } //we can use useState several times for handling diferrent state variables but we can use one useState and one\n  //variable in all inputs for example this is better than below\n\n  /*\r\n      let [name,setName] = useState();\r\n        let [age,setAge] = useState();\r\n        const inputNameHandler = (event)=>{setName(event.target.value);}\r\n        const inputAgeHandler = (event)=>{setAge(event.target.value);}\r\n    */\n  //second variant ...inputs is spread operator and gets the hole object from useState and then in\n  //the separate functions we give values of the two variables\n\n  /*\r\n      const [inputs,setInputs] = useState({name:'',age:''});\r\n      //we can get age and name as inputs.age, inputs.name\r\n        const inputNameHandler = (event)=>{setInputs({...inputs, name:event.target.value});}\r\n        const inputAgeHandler = (event)=>{setInputs({...inputs, age:event.target.value});}\r\n  */\n  //third variant is to use prevState because by this way we work with last state snapshot\n\n\n  const [inputs, setInputs] = useState({\n    name: '',\n    age: ''\n  });\n\n  const inputNameHandler = event => {\n    setInputs(prevState => {\n      return { ...prevState,\n        name: event.target.value\n      };\n    });\n  };\n\n  const inputAgeHandler = event => {\n    setInputs(prevState => {\n      return { ...prevState,\n        age: event.target.value\n      };\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log({\n      name: inputs.name,\n      age: inputs.age\n    }); //if we invoke inputAgeHandler and inputNameHandler with empty strings\n    //this will reset value because age and name will be empty strings because of two way binding\n    //inputAgeHandler('');\n    //inputNameHandler('');\n\n    console.log(event.target[0].value);\n    props.onSubmitHandler({\n      name: event.target[0].value\n    }); //here we use component props in which we will\n    //access onSubmitHandler variable which hold function handler in App.js component which is parent of\n    //Hooks and we can pass data in our case is object that is how we pass data to parent component\n    //through onSubmitHandler variable we call handlerFunc from App.js\n\n    return {\n      name: event.target[0].value,\n      age: event.target[1].value\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"hookcomponent\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hook Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handler,\n      children: \"Click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setTitle(() => ++title);\n      },\n      children: \"Click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlerFunction,\n      children: \"Click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputs.name,\n          onChange: inputNameHandler,\n          placeholder: \"enter name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: inputAgeHandler,\n          value: inputs.age,\n          type: \"number\",\n          placeholder: \"enter age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: inputs.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), inputs.age !== '' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: inputs.age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter age!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 54\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      value: submitHandler.age + 'Acho'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n} //functions could be written by this way\n\n\n_s(Hooks, \"eMV0lDLPDkKMCH74SsJrysv3rG8=\");\n\n_c = Hooks;\n\nconst App = props => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"hookcomponent\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hook Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = App;\nexport default Hooks;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Hooks\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/v-angel.zahariev/Documents/projects/goals-projects/react/reactHooks/src/components/Hooks.js"],"names":["React","useState","useEffect","Card","Hooks","props","title","setTitle","handler","console","log","handlerFunction","inputs","setInputs","name","age","inputNameHandler","event","prevState","target","value","inputAgeHandler","submitHandler","preventDefault","onSubmitHandler","App"],"mappings":"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","sourcesContent":["import {React,useState,useEffect }from 'react';\r\nimport './hooks.css';\r\nimport Card from './UI components/Card';\r\n\r\nfunction Hooks(props){// components from function type can have state can have props but to add state we have to use hooks\r\n    //they can be used only for presentation with returning some html, but they can have state and can receive props\r\n    //here we have not extend React.Component\r\n    //here we have not this keyword we will be able to access component state without 'this'\r\n    //here we have not lifecycle methods\r\n    //it can be by two ways setTitle(()=>++title) or setTitle(++tistle)\r\n    //when state is set in title if component rerenders it will save its value\r\n    \r\n    let [title,setTitle] = useState(props.title);//here we set initial value trough props.title\r\n\r\n    const handler = ()=>{console.log('pesho')}//two ways for hadler arrow anonymous function\r\n\r\n    function handlerFunction(){console.log('gosho')}\r\n\r\n    //we can use useState several times for handling diferrent state variables but we can use one useState and one\r\n    //variable in all inputs for example this is better than below\r\n                            /*\r\n                                let [name,setName] = useState();\r\n\r\n                                let [age,setAge] = useState();\r\n\r\n                                const inputNameHandler = (event)=>{setName(event.target.value);}\r\n\r\n                                const inputAgeHandler = (event)=>{setAge(event.target.value);}\r\n\r\n                            */\r\n\r\n    \r\n    //second variant ...inputs is spread operator and gets the hole object from useState and then in\r\n                //the separate functions we give values of the two variables\r\n            /*\r\n                const [inputs,setInputs] = useState({name:'',age:''});\r\n                //we can get age and name as inputs.age, inputs.name\r\n\r\n                const inputNameHandler = (event)=>{setInputs({...inputs, name:event.target.value});}\r\n\r\n                const inputAgeHandler = (event)=>{setInputs({...inputs, age:event.target.value});}\r\n            */\r\n\r\n    //third variant is to use prevState because by this way we work with last state snapshot\r\n\r\n                const [inputs,setInputs] = useState({name:'',age:''});\r\n\r\n                const inputNameHandler = (event)=>{\r\n                    setInputs((prevState)=>\r\n                    {\r\n                        return {...prevState, name:event.target.value}\r\n                    });\r\n                }\r\n\r\n                const inputAgeHandler = (event)=>{\r\n                    setInputs((prevState)=>{\r\n                        return {...prevState, age:event.target.value}\r\n                    });\r\n                }\r\n\r\n                const submitHandler = (event) => {\r\n                    event.preventDefault();\r\n                    console.log({name:inputs.name,age:inputs.age});\r\n                    //if we invoke inputAgeHandler and inputNameHandler with empty strings\r\n                    //this will reset value because age and name will be empty strings because of two way binding\r\n                    //inputAgeHandler('');\r\n                    //inputNameHandler('');\r\n                    console.log(event.target[0].value);\r\n                    props.onSubmitHandler({name:event.target[0].value});//here we use component props in which we will\r\n                    //access onSubmitHandler variable which hold function handler in App.js component which is parent of\r\n                    //Hooks and we can pass data in our case is object that is how we pass data to parent component\r\n                    //through onSubmitHandler variable we call handlerFunc from App.js\r\n                    return {name:event.target[0].value, age:event.target[1].value}\r\n                }\r\n\r\n               \r\n\r\n    return(\r\n        <Card className='hookcomponent'>\r\n            <h2>Hook Component</h2>\r\n            <button onClick={handler}>Click</button>\r\n            <br/>\r\n            <button onClick={()=>{setTitle(()=>++title)}}>Click</button>\r\n            <br/>\r\n            <button onClick={handlerFunction}>Click</button>\r\n            <br/>\r\n            <h2>{title}</h2>\r\n          \r\n            <form onSubmit={submitHandler}>\r\n                <div>\r\n                    <title>Name</title>\r\n                    <input type=\"text\" value={inputs.name} onChange={inputNameHandler} placeholder=\"enter name\"/>\r\n                      {/*adding two way binding with value={variable} attribute*/}\r\n                </div>\r\n                <div>\r\n                    <title>age</title>\r\n                    <input onChange={inputAgeHandler} value={inputs.age} type=\"number\" placeholder=\"enter age\"/>\r\n                </div>\r\n                <button type=\"submit\" >Submit</button>\r\n            </form>\r\n\r\n            <div>{inputs.name}</div>\r\n            {inputs.age!==''?<div>{inputs.age}</div>:<p>Enter age!!!</p>}{/*here is conditional statement */}\r\n            <div value={submitHandler.age + 'Acho'}></div>\r\n        </Card>\r\n    )\r\n}\r\n\r\n//functions could be written by this way\r\nconst App = (props) => { \r\n    return(\r\n        <Card className='hookcomponent'>\r\n            <h2>Hook Component</h2>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Hooks"]},"metadata":{},"sourceType":"module"}