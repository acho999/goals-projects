{"ast":null,"code":"var _jsxFileName = \"/Users/v-angel.zahariev/Downloads/projects/reactHooks/hooks/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { React, Component, useState, useEffect } from 'react'; //here we import useState which allows us to\n//use state in function component\n//we also import useEffect it is used when we have side effects, we use it also when we have to use\n//lifecycle methods like componentDidMount(it is used to do something after component is created) \n//and componentWillUnmount(it is used to clear something just before component is destroyed)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initial = 0;\n  const [random, setRandom] = useState(initial);\n  useEffect(() => {\n    let randomNuber = setInterval(() => {\n      setRandom(++random); //here we have not object {random:++random} because setRandom can change only random\n      //it points to random variable and it is not necessary\n    }, 1000); //this is used in componentDidMount\n\n    return () => clearInterval(randomNuber); //here we clearInterval which is done in componentWillUnmount\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: random\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n/*function App(){\n\n  const [counter, setCounter] = useState(0);//here we use destructoring because this setState function\n  //returns two things: first is function which change state which initial value we put as parameter\n  //in our case is 0; second is variable which is pointer to the value of the state and through it we can access it\n  //this hook can be used only in this function App and have to be on top in there\n  return (\n    <div className='App'>\n      <h1>{counter}</h1>\n      <br/>\n      <button onClick = {() => { setCounter(prevState => ++prevState)}}>Increse</button>\n      <br/>\n      <br/>\n      <button onClick = {() =>{ setCounter(0)}}>Reset</button>\n    </div>\n  )\n\n}*/\n\n/*class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {counter:0};\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n\n  }\n\n  increment(){\n\n    this.setState((prevState)=>{\n\n        return {counter : ++prevState.counter};\n    })\n\n  }\n\n  reset(){\n\n    this.setState({counter:0});\n\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>{this.state.counter}</h1>\n        <br/>\n        <button onClick={this.increment}>Increse</button>\n        <br/>\n        <br/>\n        <button onClick={this.reset}>Reset</button>\n      </div>\n    )\n  }\n  \n}*/\n\n\n_s(App, \"HErLkIhIvBpaC5c/TY9LdqS+z90=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/v-angel.zahariev/Downloads/projects/reactHooks/hooks/src/App.js"],"names":["React","Component","useState","useEffect","App","initial","random","setRandom","randomNuber","setInterval","clearInterval"],"mappings":";;;;AACA,OAAO,WAAP;AACA,SAAQA,KAAR,EAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,SAAjC,QAAiD,OAAjD,C,CAAwD;AACxD;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAc;AAAA;;AAEZ,QAAMC,OAAO,GAAG,CAAhB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACG,OAAD,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIK,WAAW,GAAGC,WAAW,CAC3B,MAAI;AACFF,MAAAA,SAAS,CAAC,EAAED,MAAH,CAAT,CADE,CACiB;AACnB;AACD,KAJ0B,EAK1B,IAL0B,CAA7B,CADY,CAMH;;AAET,WAAO,MAAMI,aAAa,CAACF,WAAD,CAA1B,CARY,CAQ4B;AAEzC,GAVQ,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GArFSF,G;;KAAAA,G;AAuFT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {React,Component,useState,useEffect} from 'react'//here we import useState which allows us to\n//use state in function component\n//we also import useEffect it is used when we have side effects, we use it also when we have to use\n//lifecycle methods like componentDidMount(it is used to do something after component is created) \n//and componentWillUnmount(it is used to clear something just before component is destroyed)\nfunction App(){\n\n  const initial = 0;\n  const [random, setRandom] = useState(initial);\n\n  useEffect(()=>{ \n    let randomNuber = setInterval(\n      ()=>{\n        setRandom(++random)//here we have not object {random:++random} because setRandom can change only random\n        //it points to random variable and it is not necessary\n      }\n      ,1000);//this is used in componentDidMount\n\n    return () => clearInterval(randomNuber);//here we clearInterval which is done in componentWillUnmount\n\n  });\n\n  return (\n    <div className='App'>\n      <h1>{random}</h1>\n    </div>\n  )\n\n}\n\n\n/*function App(){\n\n  const [counter, setCounter] = useState(0);//here we use destructoring because this setState function\n  //returns two things: first is function which change state which initial value we put as parameter\n  //in our case is 0; second is variable which is pointer to the value of the state and through it we can access it\n  //this hook can be used only in this function App and have to be on top in there\n  return (\n    <div className='App'>\n      <h1>{counter}</h1>\n      <br/>\n      <button onClick = {() => { setCounter(prevState => ++prevState)}}>Increse</button>\n      <br/>\n      <br/>\n      <button onClick = {() =>{ setCounter(0)}}>Reset</button>\n    </div>\n  )\n\n}*/\n\n/*class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {counter:0};\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n\n  }\n\n  increment(){\n\n    this.setState((prevState)=>{\n\n        return {counter : ++prevState.counter};\n    })\n\n  }\n\n  reset(){\n\n    this.setState({counter:0});\n\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>{this.state.counter}</h1>\n        <br/>\n        <button onClick={this.increment}>Increse</button>\n        <br/>\n        <br/>\n        <button onClick={this.reset}>Reset</button>\n      </div>\n    )\n  }\n  \n}*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}