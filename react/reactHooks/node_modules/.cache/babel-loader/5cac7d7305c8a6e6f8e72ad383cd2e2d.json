{"ast":null,"code":"var _jsxFileName = \"/Users/v-angel.zahariev/Documents/projects/goals-projects/react/reactHooks/hooks/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Hooks from './components/Hooks';\nimport { React, Component, useState, useEffect } from 'react'; //here we import useState which allows us to\n//use state in function component\n//we also import useEffect it is used when we have side effects, we use it also when we have to use\n//lifecycle methods like componentDidMount(it is used to do something after component is created) \n//and componentWillUnmount(it is used to clear something just before component is destroyed)\n//this useEffect sustitute another lifecycle method which is\n// cimponentDidUpdate(it is used when we update our component)\n//react hooks starts with 'use'\n//useState sets state for the component in which is being called and for every instance of that component separatelly\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /*const initial = 0;\n  const [random, setRandom] = useState(initial);\n   useEffect(()=>{ \n    let randomNuber = setInterval(\n      ()=>{\n        \n        setRandom((Math.random()*100).toFixed(0))//here we have not object {random:++random} because setRandom can change only random\n        //it points to random variable and it is not necessary\n      }\n      ,1000);//this is used in componentDidMount\n     return () => clearInterval(randomNuber);//here we clearInterval which is done in componentWillUnmount\n    //if we do not clear interval this will create memory leack\n   });*/\n  let random = useRandomNumberOnInterval(); //here we subtract all logic from App function\n  //and store it in our custom function. That way we can share state between components\n\n  let [name, setName] = useState('pesho'); //we use state do get data from child component\n\n  const handlerFunc = passedData => {\n    console.log(passedData);\n    setName(passedData.name); //here we set state of the app component which data is from child component\n\n    console.log(name); //useEffect(()=>{});\n\n    return {\n      name: passedData.name\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: random\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hooks, {\n      onSubmitHandler: handlerFunc,\n      title: '0' * 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      value: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PTOUMFsxQHXLByqtY1b+LmvJX14=\", false, function () {\n  return [useRandomNumberOnInterval];\n});\n\n_c = App;\n\nfunction useRandomNumberOnInterval() {\n  _s2();\n\n  const initial = 0;\n  const [random, setRandom] = useState(initial);\n  useEffect(() => {\n    let randomNuber = setInterval(() => {\n      setRandom((Math.random() * 100).toFixed(0));\n    }, 1000);\n    return () => clearInterval(randomNuber);\n  });\n  return random; //here we change state internally and we return the state but we may want to change\n  //it outside then we have to return array [random,setRandom]\n}\n/*function App(){\n\n  const [counter, setCounter] = useState(0);//here we use destructoring because this setState function\n  //returns two things: second is function which change state which initial value we put as parameter\n  //in our case is 0; first is variable which is pointer to the value of the state and through it we can access it\n  //this hook can be used only in this function App and have to be on top in there\n  return (\n    <div className='App'>\n      <h1>{counter}</h1>\n      <br/>\n      <button onClick = {() => { setCounter(prevState => ++prevState)}}>Increse</button>\n      <br/>\n      <br/>\n      <button onClick = {() =>{ setCounter(0)}}>Reset</button>\n    </div>\n  )\n\n}*/\n\n/*class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {counter:0};\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n\n  }\n\n  increment(){\n\n    this.setState((prevState)=>{\n\n        return {counter : ++prevState.counter};\n    })\n\n  }\n\n  reset(){\n\n    this.setState({counter:0});\n\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>{this.state.counter}</h1>\n        <br/>\n        <button onClick={this.increment}>Increse</button>\n        <br/>\n        <br/>\n        <button onClick={this.reset}>Reset</button>\n      </div>\n    )\n  }\n  \n}*/\n\n\n_s2(useRandomNumberOnInterval, \"HErLkIhIvBpaC5c/TY9LdqS+z90=\");\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/v-angel.zahariev/Documents/projects/goals-projects/react/reactHooks/hooks/src/App.js"],"names":["Hooks","React","Component","useState","useEffect","App","random","useRandomNumberOnInterval","name","setName","handlerFunc","passedData","console","log","initial","setRandom","randomNuber","setInterval","Math","toFixed","clearInterval"],"mappings":";;;;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAAQC,KAAR,EAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,SAAjC,QAAiD,OAAjD,C,CAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAc;AAAA;;AAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE,MAAIC,MAAM,GAAGC,yBAAyB,EAAtC,CAlBY,CAkB6B;AACzC;;AACA,MAAG,CAACC,IAAD,EAAMC,OAAN,IAAiBN,QAAQ,CAAC,OAAD,CAA5B,CApBY,CAoB0B;;AACtC,QAAMO,WAAW,GAAIC,UAAD,IAAc;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAF,IAAAA,OAAO,CAACE,UAAU,CAACH,IAAZ,CAAP,CAFgC,CAEP;;AACzBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAHgC,CAIhC;;AACA,WAAO;AAACA,MAAAA,IAAI,EAACG,UAAU,CAACH;AAAjB,KAAP;AACD,GAND;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,eAAe,EAAII,WAA1B;AAAuC,MAAA,KAAK,EAAE,MAAI;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFF,oBAME;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAK,MAAA,KAAK,EAAEF;AAAZ;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA3CQH,G;UAkBME,yB;;;KAlBNF,G;;AA6CT,SAASE,yBAAT,GAAoC;AAAA;;AAElC,QAAMO,OAAO,GAAG,CAAhB;AACA,QAAM,CAACR,MAAD,EAASS,SAAT,IAAsBZ,QAAQ,CAACW,OAAD,CAApC;AAEAV,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIY,WAAW,GAAGC,WAAW,CAC3B,MAAI;AAEFF,MAAAA,SAAS,CAAC,CAACG,IAAI,CAACZ,MAAL,KAAc,GAAf,EAAoBa,OAApB,CAA4B,CAA5B,CAAD,CAAT;AACD,KAJ0B,EAK1B,IAL0B,CAA7B;AAOA,WAAO,MAAMC,aAAa,CAACJ,WAAD,CAA1B;AAED,GAVQ,CAAT;AAYA,SAAOV,MAAP,CAjBkC,CAiBpB;AACd;AAED;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAlFSC,yB;;AAoFT,eAAeF,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Hooks from './components/Hooks'\nimport {React,Component,useState,useEffect} from 'react'//here we import useState which allows us to\n//use state in function component\n//we also import useEffect it is used when we have side effects, we use it also when we have to use\n//lifecycle methods like componentDidMount(it is used to do something after component is created) \n//and componentWillUnmount(it is used to clear something just before component is destroyed)\n//this useEffect sustitute another lifecycle method which is\n// cimponentDidUpdate(it is used when we update our component)\n//react hooks starts with 'use'\n//useState sets state for the component in which is being called and for every instance of that component separatelly\nfunction App(){\n      \n  /*const initial = 0;\n  const [random, setRandom] = useState(initial);\n\n  useEffect(()=>{ \n    let randomNuber = setInterval(\n      ()=>{\n        \n        setRandom((Math.random()*100).toFixed(0))//here we have not object {random:++random} because setRandom can change only random\n        //it points to random variable and it is not necessary\n      }\n      ,1000);//this is used in componentDidMount\n\n    return () => clearInterval(randomNuber);//here we clearInterval which is done in componentWillUnmount\n    //if we do not clear interval this will create memory leack\n\n  });*/\n  let random = useRandomNumberOnInterval();//here we subtract all logic from App function\n  //and store it in our custom function. That way we can share state between components\n  let[name,setName] = useState('pesho');//we use state do get data from child component\n  const handlerFunc = (passedData)=>{ \n    console.log(passedData);\n    setName(passedData.name);//here we set state of the app component which data is from child component\n    console.log(name);\n    //useEffect(()=>{});\n    return {name:passedData.name}\n  }\n  return (\n    <div className='App'>\n      <h1>{random}</h1>\n      <Hooks onSubmitHandler = {handlerFunc} title={'0'*1}/> {/*here we create own listener variable onSubmitHandler\n      to which we will add a function in curly brackets which will be deklared here in parent component and it will \n      receive parameter which will be passed from inside Hooks component. By this way we can send information from\n      child component to parent component*/}\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <div value={name}></div>\n    </div>\n  )\n\n}\n\nfunction useRandomNumberOnInterval(){\n\n  const initial = 0;\n  const [random, setRandom] = useState(initial);\n\n  useEffect(()=>{ \n    let randomNuber = setInterval(\n      ()=>{\n        \n        setRandom((Math.random()*100).toFixed(0))\n      }\n      ,1000);\n\n    return () => clearInterval(randomNuber);\n\n  })\n\n  return random;//here we change state internally and we return the state but we may want to change\n  //it outside then we have to return array [random,setRandom]\n\n}\n\n\n/*function App(){\n\n  const [counter, setCounter] = useState(0);//here we use destructoring because this setState function\n  //returns two things: second is function which change state which initial value we put as parameter\n  //in our case is 0; first is variable which is pointer to the value of the state and through it we can access it\n  //this hook can be used only in this function App and have to be on top in there\n  return (\n    <div className='App'>\n      <h1>{counter}</h1>\n      <br/>\n      <button onClick = {() => { setCounter(prevState => ++prevState)}}>Increse</button>\n      <br/>\n      <br/>\n      <button onClick = {() =>{ setCounter(0)}}>Reset</button>\n    </div>\n  )\n\n}*/\n\n/*class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {counter:0};\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n\n  }\n\n  increment(){\n\n    this.setState((prevState)=>{\n\n        return {counter : ++prevState.counter};\n    })\n\n  }\n\n  reset(){\n\n    this.setState({counter:0});\n\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>{this.state.counter}</h1>\n        <br/>\n        <button onClick={this.increment}>Increse</button>\n        <br/>\n        <br/>\n        <button onClick={this.reset}>Reset</button>\n      </div>\n    )\n  }\n  \n}*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}