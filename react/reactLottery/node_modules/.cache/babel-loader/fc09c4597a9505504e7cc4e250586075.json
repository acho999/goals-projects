{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\angel.zahariev\\\\Documents\\\\projects\\\\lottery\\\\lottery\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Lottery, Final, About } from './helper/imports';\nimport { getRandomNumber } from './helper/utills';\nimport { registerTickets, removeTicket, checkTicket, reset } from './helper/actions';\nimport 'antd/dist/antd.css';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom'; //this way we add router routes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  // тук в този главен компонент трябва да държим стейт който ще се ползва от другите компоненти\n  //тук ще се предостави и начина този стейт да се модифицира и от другите деца компоненти това става с функции\n  //които ще приемат някакви параметри\n  //Значи стейта който ни трябва ще се пази тук в главния компонент и той ще може да се модифицира от другите\n  // компоненти чрез функции и ще може да се подава надолу по компонентите като props\n  constructor(props) {\n    //from state in constructor all our components are dependant \n    //and all components are reactive because of this state \n    //it is a parent component state and all components depend on it\n    //is state is changed then all components are noticed and they will be updated\n    //FOR ROUTING WE HAVE TO WRITE NPM INSTALL REACT-ROUTER-DOM IN CMD STARTED FROM FOLDER WHERE OUR PROJECT IS INSTALLED \n    super(props);\n    this.state = {\n      winningNumber: getRandomNumber(),\n      tickets: [],\n      remainingTickets: 5,\n      finished: false\n    };\n    this.registerTickets = registerTickets.bind(this);\n    this.removeTicket = removeTicket.bind(this);\n    this.checkTicket = checkTicket.bind(this);\n    this.reset = reset.bind(this);\n    this.renderApp = renderApp.bind(this); // here we bind this function because ot need for access\n    // context of the App component in this function because there have changes in state which is in App component\n  }\n\n  renderApp() {\n    //в тази ф-я на база на условна конструкция ще казваме дали даден компонент ще се зарежда или не\n    const actions = {\n      registerTickets: this.registerTickets,\n      removeTicket: this.removeTicket,\n      checkTicket: this.checkTicket,\n      reset: this.reset\n    }; //here we tell to actions to be object and put it to the\n    //prop.actions in Lottery component\n\n    if (this.state.finished) {\n      return /*#__PURE__*/_jsxDEV(Final, {\n        actions: actions,\n        tickets: this.state.tickets,\n        winningNumber: this.state.winningNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Lottery, {\n      actions: actions // тук слагаме prop actions за да можем да добавяме функции които ще манипулират стейта в App \n      //и тези функции ще ги достъпваме чрез prop actions \n      ,\n      tickets: this.state.tickets,\n      remainingTickets: this.state.remainingTickets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //  <BrowserRouter> we put it on top because it have to be on top of hierarchy and all other html have to be inside of it\n      //Below in Route tag we put in component={this.renderApp()} because this function return our components \n      //it can be achieved also with ()=>{this.renderApp()} because in arrow function this points to class context\n      // and we had to bind it in constructor when we go to '/' we will access home page\n      //below if firs route which is '/' is included in routes below  we have to put 'exact' in it because React will load only one component\n      // and it will be only from renderApp(), to not have this we have to put 'exact' or 'exact match=\"/some route\"'\n      //now we go to About.js and import {Link} which is hiperlink to link our component with path '/about'\n      //here we add <Link> tag around text in <a> tags to link path with to='/about' attribute with path=\"/about\" in <Route> tag\n      _jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"topnav\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"active\",\n              href: \"#home\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/\",\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#about\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/about\",\n                children: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              exact: true,\n              Component: this.renderApp()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/about\",\n              Component: About\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/angel.zahariev/Documents/projects/lottery/lottery/src/App.js"],"names":["React","Component","Lottery","Final","About","getRandomNumber","registerTickets","removeTicket","checkTicket","reset","BrowserRouter","Route","Switch","Link","App","constructor","props","state","winningNumber","tickets","remainingTickets","finished","bind","renderApp","actions","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport './App.css';\nimport {Lottery,Final,About} from './helper/imports'\nimport {getRandomNumber} from './helper/utills'\nimport {registerTickets,removeTicket,checkTicket,reset} from './helper/actions'\nimport 'antd/dist/antd.css';\nimport {BrowserRouter,Route,Switch,Link} from 'react-router-dom'//this way we add router routes\n\nclass App extends Component{\n    // тук в този главен компонент трябва да държим стейт който ще се ползва от другите компоненти\n    //тук ще се предостави и начина този стейт да се модифицира и от другите деца компоненти това става с функции\n    //които ще приемат някакви параметри\n    //Значи стейта който ни трябва ще се пази тук в главния компонент и той ще може да се модифицира от другите\n    // компоненти чрез функции и ще може да се подава надолу по компонентите като props\n\n  constructor(props) {//from state in constructor all our components are dependant \n    //and all components are reactive because of this state \n    //it is a parent component state and all components depend on it\n    //is state is changed then all components are noticed and they will be updated\n    //FOR ROUTING WE HAVE TO WRITE NPM INSTALL REACT-ROUTER-DOM IN CMD STARTED FROM FOLDER WHERE OUR PROJECT IS INSTALLED \n    super(props);\n    this.state = {\n      winningNumber    : getRandomNumber(),\n       tickets: [],\n       remainingTickets        :5,\n      finished         : false\n    }\n    this.registerTickets = registerTickets.bind(this);\n    this.removeTicket = removeTicket.bind(this);\n    this.checkTicket = checkTicket.bind(this);\n    this.reset = reset.bind(this);\n    this.renderApp = renderApp.bind(this);\n    // here we bind this function because ot need for access\n    // context of the App component in this function because there have changes in state which is in App component\n  }\n\n  renderApp(){  //в тази ф-я на база на условна конструкция ще казваме дали даден компонент ще се зарежда или не\n    const actions = {registerTickets : this.registerTickets, \n                      removeTicket : this.removeTicket, \n                      checkTicket : this.checkTicket,\n                      reset: this.reset\n                    }\n    //here we tell to actions to be object and put it to the\n    //prop.actions in Lottery component\n      if (this.state.finished) {\n\n        return <Final\n            actions = {actions}\n            tickets = {this.state.tickets}\n            winningNumber = {this.state.winningNumber}\n        />;\n        \n      }\n   return  <Lottery \n            actions = {actions}// тук слагаме prop actions за да можем да добавяме функции които ще манипулират стейта в App \n            //и тези функции ще ги достъпваме чрез prop actions \n            tickets = {this.state.tickets}\n              remainingTickets = {this.state.remainingTickets} \n          />\n  }\n\n  render(){\n    return (\n      //  <BrowserRouter> we put it on top because it have to be on top of hierarchy and all other html have to be inside of it\n      //Below in Route tag we put in component={this.renderApp()} because this function return our components \n      //it can be achieved also with ()=>{this.renderApp()} because in arrow function this points to class context\n      // and we had to bind it in constructor when we go to '/' we will access home page\n      //below if firs route which is '/' is included in routes below  we have to put 'exact' in it because React will load only one component\n      // and it will be only from renderApp(), to not have this we have to put 'exact' or 'exact match=\"/some route\"'\n      //now we go to About.js and import {Link} which is hiperlink to link our component with path '/about'\n      //here we add <Link> tag around text in <a> tags to link path with to='/about' attribute with path=\"/about\" in <Route> tag\n      <BrowserRouter>\n      \n      <div className ='App'>\n          <div className='topnav'>\n            <a className='active' href='#home'><Link to='/'>Home</Link></a>\n            <a href='#about'><Link to='/about'>About</Link></a>\n          </div>\n          <Switch>\n            <Route path='/' exact Component={this.renderApp()}/>\n            <Route path='/about' Component={About}/>\n          </Switch>\n      </div>\n\n      </BrowserRouter>\n      \n      );\n\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}